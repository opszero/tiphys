{{- range $app := .Values.apps }}
{{- with $app.jobs }}
{{- range $job := $app.jobs }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "opszero.fullname" $ }}-{{ $job.name }}
  annotations:
    {{- if $job.annotations }}
    {{- toYaml $job.annotations | nindent 4 }}
    {{- else }}
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
    {{- end }}
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}
spec:
  template:
    metadata:
      labels:
        name: {{ include "opszero.fullname" $ }}-{{ $job.name }}
    spec:
      restartPolicy: Never
      containers:
        - name: {{ include "opszero.fullname" $ }}
          image: {{ default $.Values.defaultImage $app.image | quote }}
          imagePullPolicy: {{ default "Always" $app.service.imagePullPolicy | quote }}
          command: ["bash", "-c", {{ $job.command | join " " | quote}}]
          envFrom:
            - secretRef:
                name: {{ template "opszero.fullname" $ }}
          env:
            - name: TIPHYS_APP
              value: {{ $app.name }}
            {{- if $.Values.envRaw }}
              {{- toYaml $.Values.envRaw | nindent 12 }}
            {{- end }}
            {{- if $app.service.envRaw }}
              {{- toYaml $app.service.envRaw | nindent 12 }}
            {{- end }}
          {{- if $job.resources }}
          resources:
            {{- toYaml $job.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: secrets
              mountPath: "/secrets"
              readOnly: true
            {{- if $app.secrets }}
            - name: appsecrets
              mountPath: "/app-secrets"
              readOnly: true
            {{- end }}
      volumes:
        - name: secrets
          secret:
            secretName: {{ template "opszero.fullname" $ }}
        {{- if $app.secrets }}
        - name: appsecrets
          secret:
            secretName: {{ template "opszero.fullname" $ }}-{{ $app.name }}
        {{- end }}
{{- end }}
{{- end }}

{{- if $app.service.enabled }}
{{- with $app.service.type }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "opszero.fullname" $ }}-{{ $app.name }}
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}-{{ $app.name }}
spec:
  type: {{ $app.service.type }}
  selector:
    {{- include "opszero.selectorLabels" $ | nindent 4 }}-{{ $app.name }}
  {{- if ne $app.service.type "ExternalName" }}
  {{- with $app.service.ports }}
  ports:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- else }}
  externalName: {{ $app.service.externalName }}
  {{- end }}
  {{- if $app.service.sessionAffinity }}
  sessionAffinity: {{ $app.service.sessionAffinity | default "None" }}
  {{- end }}

  {{- end }}

  {{- if $app.pdb }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "opszero.fullname" $ }}-{{ $app.name }}-pdb
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "opszero.selectorLabels" $ | nindent 6 }}-{{ $app.name }}
  {{- if $app.pdb.minAvailable }}
  minAvailable: {{ $app.pdb.minAvailable }}
  {{- else if $app.pdb.maxUnavailable }}
  maxUnavailable: {{ $app.pdb.maxUnavailable }}
  {{- end }}
  {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "opszero.fullname" $ }}-{{ $app.name }}
  labels:
    {{- include "opszero.selectorLabels" $ | nindent 4 }}-{{ $app.name }}
    {{- if $.Values.datadog.enabled }}
    tags.datadoghq.com/env: {{ $.Values.datadog.envName | quote }}
    tags.datadoghq.com/service: {{ include "opszero.fullname" $ }}-{{ $app.name }}
    tags.datadoghq.com/version: {{ $.Values.datadog.version | quote }}
    {{- end }}
spec:
  {{- if not $app.service.autoscaling.enabled }}
  replicas: {{ $.Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "opszero.selectorLabels" $ | nindent 6 }}-{{ $app.name }}
  {{- with $app.service.strategy }}
  strategy:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- with $app.service.podAnnotations -}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
      labels:
      {{- include "opszero.selectorLabels" $ | nindent 8 }}-{{ $app.name }}
      {{- if $.Values.datadog.enabled }}
        tags.datadoghq.com/env: {{ $.Values.datadog.envName | quote }}
        tags.datadoghq.com/service: {{ include "opszero.fullname" $ }}-{{ $app.name }}
        tags.datadoghq.com/version: {{ $.Values.datadog.version | quote }}
      {{- end }}
    spec:
      automountServiceAccountToken: false
      hostPID: false
      hostIPC: false
      hostNetwork: false
      containers:
        - name: {{ $.Chart.Name }}
          image: {{ default $.Values.defaultImage $app.image | quote }}
          imagePullPolicy: {{ default "Always" $app.service.imagePullPolicy | quote }}
          securityContext:
          {{- toYaml $.Values.defaultSecurityContext | nindent 12 }}
          {{- with $app.service.securityContext }}
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if $app.service.command }}
          command: ["bash", "-c", {{ $app.service.command | join " " | quote}}]
          {{- end }}
          envFrom:
            - secretRef:
                name: {{ template "opszero.fullname" $ }}
          {{- if $app.secrets }}
            - secretRef:
                name: {{ template "opszero.fullname" $ }}-{{ $app.name }}
          {{- end }}
          env:
            - name: TIPHYS_APP
              value: {{ $app.name }}
            {{- if $.Values.envRaw }}
              {{- toYaml $.Values.envRaw | nindent 12 }}
            {{- end }}
            {{- if $app.service.envRaw }}
              {{- toYaml $app.service.envRaw | nindent 12 }}
            {{- end }}
          {{- with $app.service.ports }}
          ports:
          {{- range $port := . }}
            - name: {{ $port.name }}
              containerPort: {{ $port.port }}
              protocol: {{ $port.protocol }}
          {{- end }}
          {{- end }}
          {{- if $app.service.resources }}
          resources:
            {{- toYaml $app.service.resources | nindent 12 }}
          {{- end }}
          {{- with $app.service.healthChecks }}
          {{ toYaml . | nindent 10 }}
          {{- end }}
          volumeMounts:
            - name: secrets
              mountPath: "/secrets"
              readOnly: true
            {{- if $app.secrets }}
            - name: appsecrets
              mountPath: "/app-secrets"
              readOnly: true
            {{- end }}
        {{- with $app.service.volumeMounts }}
           {{- toYaml . | nindent 12 }}
        {{- end }}
      volumes:
        - name: secrets
          secret:
            secretName: {{ $app.name }}
        {{- if $app.secrets }}
        - name: appsecrets
          secret:
            secretName: {{ template "opszero.fullname" $ }}-{{ $app.name }}
        {{- end }}
        {{- with $app.service.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}

{{- if $app.secrets }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ template "opszero.fullname" $ }}-{{ $app.name }}
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
stringData:
{{- range $k, $v := $app.secrets }}
  {{ $k }}: {{ $v | quote -}}
{{- end }}
{{- end }}

{{- with $app.service.autoscaling }}
{{- if $app.service.autoscaling.enabled }}
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: {{ include "opszero.fullname" $ }}-{{ $app.name }}
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}
spec:
  scaleTargetRef:
    name: {{ include "opszero.fullname" $ }}-{{ $app.name }}
    kind: Deployment
  minReplicaCount: {{ default $.Values.autoscaling.minReplicas $app.service.autoscaling.minReplicas }}
  maxReplicaCount: {{ default $.Values.autoscaling.maxReplicas $app.service.autoscaling.maxReplicas }}
  cooldownPeriod: 60
  triggers:
  - type: cpu
    metadata:
      type: Utilization
      value: {{ default $.Values.autoscaling.targetCPUUtilizationPercentage $app.service.autoscaling.targetCPUUtilizationPercentage | quote }}
  - type: memory
    metadata:
      type: Utilization
      value: {{ default $.Values.autoscaling.targetMemoryUtilizationPercentage $app.service.autoscaling.targetMemoryUtilizationPercentage | quote }}
  {{- with $app.service.autoscaling.kedaTriggers }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
{{- end }}
{{- end }}

{{- if and $app.service.ingress $app.service.ingress.hosts}}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "opszero.fullname" $ }}-{{ $app.name }}
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-body-size: "128m"
  {{- with $.Values.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{ if $app.service.ingress }}
  {{- with $app.service.ingress.annotations }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- end }}
spec:
  ingressClassName: nginx
  rules:
    {{- with $app.service.ingress }}
    {{- with $app.service.ingress.hosts }}
    {{- range $host := . }}
    - host: {{ .host | quote }}
      http:
        paths:
          {{- range .paths }}
          - path: {{ . | quote }}
            pathType: Prefix
            backend:
              service:
                name: {{ include "opszero.fullname" $ }}-{{ $app.name }}
                port:
                  number: {{ $host.port }}
          {{- end }}
    {{- end }}
    {{- end }}
    {{- end }}
  tls:
    - hosts:
    {{- range $app.service.ingress.hosts }}
        - {{ .host }}
    {{- end }}
      secretName: {{ include "opszero.fullname" $ }}-{{ $app.name }}-tls
{{- end -}}
{{- end }}

{{- range $cronjob := $app.cronjobs }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ template "opszero.fullname" $ }}-{{ $app.name }}-{{ $cronjob.name }}
  labels:
    {{- include "opszero.labels" $ | nindent 4 }}
spec:
  schedule: {{ $cronjob.schedule | quote }}
  successfulJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
            - name: app
              image: {{ default $.Values.defaultImage $app.image | quote }}
              imagePullPolicy: Always
              command: ["bash", "-c", {{ $cronjob.command | join " " | quote}}]
              envFrom:
                - secretRef:
                    name: {{ template "opszero.fullname" $ }}
              env:
                - name: TIPHYS_APP
                  value: {{ $app.name }}
                {{- if $.Values.envRaw }}
                  {{- toYaml $.Values.envRaw | nindent 16 }}
                {{- end }}
                {{- if $app.service.envRaw }}
                  {{- toYaml $app.service.envRaw | nindent 16 }}
                {{- end }}
              {{- if $cronjob.resources }}
              resources:
                {{- toYaml $cronjob.resources | nindent 16 }}
              {{- end }}
              volumeMounts:
                - name: secrets
                  mountPath: "/secrets"
                  readOnly: true
                {{- if $app.secrets }}
                - name: appsecrets
                  mountPath: "/app-secrets"
                  readOnly: true
                {{- end }}
          volumes:
            - name: secrets
              secret:
                secretName: {{ $app.name }}
            {{- if $app.secrets }}
            - name: appsecrets
              secret:
                secretName: {{ template "opszero.fullname" $ }}-{{ $app.name }}
            {{- end }}
{{- end }}
{{- end }}
